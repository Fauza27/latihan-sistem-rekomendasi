# -*- coding: utf-8 -*-
"""System Recomendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B2Nmn3uU_YprIv4BYsdAvSZJQ0fF5uGo

Import Library
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt

"""Membaca dataset"""

data = pd.read_csv('/content/Tagged-Data-Final.csv')
data

"""Univariate Exploratory Data Analysis

Mengetahui apa saja genre game yang ada
"""

print('Banyak tipe genre: ', len(data.Genre.unique()))
print('Genre Game : ', data.Genre.unique())

"""mengecek persebaran distribusi genre"""

feature = 'Genre'
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);
plt.xlabel("Gambar 1. Distribusi kategori genre")

"""Mengetahui siapa saja Publisher game yang ada"""

print('Banyak tipe publisher: ', len(data.Publisher.unique()))
print('Publisher Game : ', data.Publisher.unique())

"""Mengetahui persebaran distribusi publisher"""

feature = 'Publisher'
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);
plt.xlabel("Gambar 2. Distribusi kategori publisher")

"""Mengetahui persebaran distribusi developer"""

feature = 'Developer'
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);
plt.xlabel("Gambar 3. Distribusi kategori developer")

"""Mengetahui siapa saja Developer game yang ada"""

print('Banyak Developer: ', len(data.Developer.unique()))
print('Developer: ', data.Developer.unique())

"""Mengetahui apa saja tipe rating game yang ada"""

print('Banyaknya Rating: ', len(data.Rating.unique()))
print('Tipe Rating: ', data.Rating.unique())

"""Mengetahui persebaran distribusi rating"""

feature = 'Rating'
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);
plt.xlabel("Gambar 4. Distribusi kategori rating")

"""Menghapus kolom Story Focus, Gameplay focus, Series"""

data.drop('Story Focus', axis=1, inplace=True)
data.drop('Gameplay Focus', axis=1, inplace=True)
data.drop('Series', axis=1, inplace=True)

"""Mengecek apakah ada missing value"""

data.isnull().sum()

"""Menghapus Missing Value"""

data_clean = data.dropna()
data_clean

"""Memastikan kembali apakah masih terdapat missing value atau tidak"""

data_clean.isnull().sum()

"""Menganti Rating K-A menjadi E"""

data_clean = data_clean.replace('K-A', 'E')

"""Membuat variabel bernama preparation"""

preparation = data_clean
preparation

"""Mengonversi data series menjadi list"""

# Mengonversi data series ‘Name’ menjadi dalam bentuk list
game_name = preparation['Name'].tolist()

# Mengonversi data series ‘Genre’ menjadi dalam bentuk list
game_genre = preparation['Genre'].tolist()

print(len(game_name))
print(len(game_genre))

"""Membuat dictionary untuk data ‘game_name’, dan ‘game_genre’"""

game_new = pd.DataFrame({
    'game_name': game_name,
    'genre': game_genre
})
game_new

"""menemukan representasi fitur penting dari setiap kategori genre."""

tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data genre
tf.fit(game_new['genre'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

""" melakukan fit dan transformasi ke dalam bentuk matriks"""

tfidf_matrix = tf.fit_transform(game_new['genre'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""menghasilkan vektor tf-idf dalam bentuk matriks"""

tfidf_matrix.todense()

""" melihat matriks tf-idf untuk beberapa game (game_name) dan kategori genre (genre)"""

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=game_new.game_name
).sample(13, axis=1).sample(10, axis=0)

"""Menghitung cosine similarity pada matrix tf-idf"""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""melihat matriks kesamaan setiap game dengan menampilkan nama game"""

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama resto
cosine_sim_df = pd.DataFrame(cosine_sim, index=game_new['game_name'], columns=game_new['game_name'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap game
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Membuat fungsi rekomendasi"""

def game_recommendations(nama_game, similarity_data=cosine_sim_df, items=game_new[['game_name', 'genre']], k=5):
    index = similarity_data.loc[:, nama_game].to_numpy().argpartition(range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop nama_resto agar nama resto yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_game, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""mengecek genre dari game yang ingin di coba dicari rekomendasinya"""

game_new[game_new.game_name.eq('Airblade')]

"""mencoba fungsi rekomendasi"""

game_recommendations('Airblade')